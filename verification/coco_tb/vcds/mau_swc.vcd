$date
	Tue Jan 28 19:31:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module mau_swc_wrapper $end
$var wire 4 ! cycle_cnt [3:0] $end
$var wire 32 " exu_load_base_addr [31:0] $end
$var wire 1 # exu_load_en $end
$var wire 32 $ exu_load_offset [31:0] $end
$var wire 5 % exu_load_rd [4:0] $end
$var wire 1 & exu_load_sext $end
$var wire 2 ' exu_load_size [1:0] $end
$var wire 32 ( exu_store_addr [31:0] $end
$var wire 32 ) exu_store_data [31:0] $end
$var wire 1 * exu_store_en $end
$var wire 2 + exu_store_size [1:0] $end
$var wire 3 , hburst [2:0] $end
$var wire 1 - hclk $end
$var wire 1 . hmastlock $end
$var wire 32 / hrdata [31:0] $end
$var wire 1 0 hready $end
$var wire 1 1 hresp $end
$var wire 1 2 hrstn $end
$var wire 5 3 mau_load_rd [4:0] $end
$var wire 1 4 mau_load_en $end
$var wire 32 5 mau_load_data [31:0] $end
$var wire 1 6 hwrite $end
$var wire 32 7 hwdata [31:0] $end
$var wire 2 8 htrans [1:0] $end
$var wire 3 9 hsize [2:0] $end
$var wire 7 : hprot [6:0] $end
$var wire 32 ; haddr [31:0] $end
$scope module dut $end
$var wire 4 < cycle_cnt [3:0] $end
$var wire 32 = exu_load_base_addr [31:0] $end
$var wire 1 # exu_load_en $end
$var wire 32 > exu_load_offset [31:0] $end
$var wire 5 ? exu_load_rd [4:0] $end
$var wire 1 & exu_load_sext $end
$var wire 2 @ exu_load_size [1:0] $end
$var wire 32 A exu_store_addr [31:0] $end
$var wire 32 B exu_store_data [31:0] $end
$var wire 1 * exu_store_en $end
$var wire 2 C exu_store_size [1:0] $end
$var wire 3 D hburst [2:0] $end
$var wire 1 - hclk $end
$var wire 1 . hmastlock $end
$var wire 32 E hrdata [31:0] $end
$var wire 1 0 hready $end
$var wire 1 1 hresp $end
$var wire 1 2 hrstn $end
$var wire 3 F hsize [2:0] $end
$var parameter 32 G CNT_MAX $end
$var parameter 32 H HTRANS_BUSY $end
$var parameter 32 I HTRANS_IDLE $end
$var parameter 32 J HTRANS_NONSEQ $end
$var parameter 32 K HTRANS_SEQ $end
$var parameter 32 L IDLE $end
$var parameter 32 M LOAD_BTYE $end
$var parameter 32 N LOAD_HALFWORD $end
$var parameter 32 O LOAD_IDLE $end
$var parameter 32 P LOAD_WORD $end
$var parameter 32 Q READ_START $end
$var parameter 32 R READ_WAIT1 $end
$var parameter 32 S READ_WAIT2 $end
$var parameter 32 T WRITE_START $end
$var parameter 32 U WRITE_WAIT $end
$var reg 32 V haddr [31:0] $end
$var reg 7 W hprot [6:0] $end
$var reg 2 X htrans [1:0] $end
$var reg 32 Y hwdata [31:0] $end
$var reg 1 6 hwrite $end
$var reg 32 Z mau_load_data [31:0] $end
$var reg 32 [ mau_load_data_buff [31:0] $end
$var reg 1 4 mau_load_en $end
$var reg 5 \ mau_load_rd [4:0] $end
$var reg 5 ] mau_load_rd_buff [4:0] $end
$var reg 3 ^ nextstate [2:0] $end
$var reg 3 _ state [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 U
b100 T
b11 S
b10 R
b1 Q
b11 P
b0 O
b10 N
b1 M
b0 L
b11 K
b10 J
b0 I
b1 H
b100 G
$end
#0
$dumpvars
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
bx W
b0 V
b0 F
bz E
b0 D
bz C
bz B
bz A
bz @
bz ?
bz >
bz =
bz <
b0 ;
bx :
b0 9
b0 8
b0 7
06
b0 5
04
b0 3
02
z1
z0
bz /
0.
1-
b0 ,
bz +
z*
bz )
bz (
bz '
z&
bz %
bz $
z#
bz "
bz !
$end
#5000
0-
#10000
b1 ^
b10 9
b10 F
1-
1#
1&
b11 '
b11 @
b100 $
b100 >
b1000000000000 "
b1000000000000 =
10
b1 !
b1 <
12
#15000
0-
#20000
b10 !
b10 <
b11011110101011011011111011101111 /
b11011110101011011011111011101111 E
0#
b11 ^
b1 _
b10 8
b10 X
b1000000000100 ;
b1000000000100 V
1-
#25000
0-
#30000
b11 !
b11 <
b0 ^
b0 8
b0 X
b11 _
1-
#35000
0-
#40000
b100 !
b100 <
b0 _
bz ]
b11011110101011011011111011101111 [
1-
#45000
0-
#50000
b1 !
b1 <
bz 3
bz \
b11011110101011011011111011101111 5
b11011110101011011011111011101111 Z
b0 ]
b0 [
1-
#55000
0-
#60000
1-
#60001
b0 9
b0 F
b0 !
b0 <
02
#65001
0-
#70001
b1 ^
b1 !
b1 <
b10 9
b10 F
1-
1#
0&
b1 '
b1 @
b1 $
b1 >
12
#75001
0-
#80001
b10 !
b10 <
b10101011 /
b10101011 E
0#
b11 ^
b1 _
b10 8
b10 X
b1000000000001 ;
b1000000000001 V
1-
#85001
0-
#90001
b11 !
b11 <
b0 ^
b0 8
b0 X
b11 _
1-
#95001
0-
#100001
b100 !
b100 <
b0 _
bz ]
b10101011 [
1-
#105001
0-
#110001
b1 !
b1 <
b10101011 5
b10101011 Z
b0 ]
b0 [
1-
#115001
0-
#120001
1-
#120002
b0 9
b0 F
b0 !
b0 <
02
#125002
0-
#130002
b1 ^
b1 !
b1 <
b10 9
b10 F
1-
1#
1&
12
#135002
0-
#140002
b10 !
b10 <
0#
b11 ^
b1 _
b10 8
b10 X
1-
#145002
0-
#150002
b11 !
b11 <
b0 ^
b0 8
b0 X
b11 _
1-
#155002
0-
#160002
b100 !
b100 <
b0 _
bz ]
b11111111111111111111111110101011 [
1-
#165002
0-
#170002
b1 !
b1 <
b11111111111111111111111110101011 5
b11111111111111111111111110101011 Z
b0 ]
b0 [
1-
#175002
0-
#180002
1-
#180003
b0 9
b0 F
b0 !
b0 <
02
#185003
0-
#190003
b1 ^
b1 !
b1 <
b10 9
b10 F
1-
1#
0&
b10 '
b10 @
12
#195003
0-
#200003
b10 !
b10 <
b11011110101011011011111011101111 /
b11011110101011011011111011101111 E
0#
b11 ^
b1 _
b10 8
b10 X
1-
#205003
0-
#210003
b11 !
b11 <
b0 ^
b0 8
b0 X
b11 _
1-
#215003
0-
#220003
b100 !
b100 <
b0 _
bz ]
b1011111011101111 [
1-
#225003
0-
#230003
b1 !
b1 <
b1011111011101111 5
b1011111011101111 Z
b0 ]
b0 [
1-
#235003
0-
#240003
1-
#240004
b0 9
b0 F
b0 !
b0 <
02
#245004
0-
#250004
b1 ^
b1 !
b1 <
b10 9
b10 F
1-
1#
1&
12
#255004
0-
#260004
b10 !
b10 <
0#
b11 ^
b1 _
b10 8
b10 X
1-
#265004
0-
#270004
b11 !
b11 <
b0 ^
b0 8
b0 X
b11 _
1-
#275004
0-
#280004
b100 !
b100 <
b0 _
bz ]
b11111111111111111011111011101111 [
1-
#285004
0-
#290004
b1 !
b1 <
b11111111111111111011111011101111 5
b11111111111111111011111011101111 Z
b0 ]
b0 [
1-
#295004
0-
#300004
1-
#300005
b0 9
b0 F
b0 !
b0 <
02
#305005
0-
#310005
b100 ^
b1 !
b1 <
00
b10 9
b10 F
1-
b11011110101011011011111011101111 )
b11011110101011011011111011101111 B
1*
b11 '
b11 @
b100 $
b100 >
12
#315005
0-
#320005
b10 !
b10 <
b100 _
b10 8
b10 X
16
b0 ;
b0 V
b11011110101011011011111011101111 7
b11011110101011011011111011101111 Y
1-
#325005
0-
#330005
1-
#330006
