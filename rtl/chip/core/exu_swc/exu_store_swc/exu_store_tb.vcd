$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module exu_store_tb $end
   $var wire 1 = hclk $end
   $var wire 1 # hrstn $end
   $var wire 4 $ cycle_cnt [3:0] $end
   $var wire 1 % dec_store_en $end
   $var wire 1 & dec_sb $end
   $var wire 1 ' dec_sh $end
   $var wire 1 ( dec_sw $end
   $var wire 12 ) dec_imm_type_s [11:0] $end
   $var wire 5 * dec_rs1 [4:0] $end
   $var wire 5 + dec_rs2 [4:0] $end
   $var wire 32 , reg_rdata_1 [31:0] $end
   $var wire 32 - reg_rdata_2 [31:0] $end
   $var wire 1 . exu_stall $end
   $var wire 32 / exu_store_addr [31:0] $end
   $var wire 32 0 exu_store_data [31:0] $end
   $var wire 1 1 exu_store_en $end
   $var wire 2 2 exu_store_size [1:0] $end
   $scope module uut $end
    $var wire 1 = hclk $end
    $var wire 1 # hrstn $end
    $var wire 4 $ cycle_cnt [3:0] $end
    $var wire 1 % dec_store_en $end
    $var wire 1 & dec_sb $end
    $var wire 1 ' dec_sh $end
    $var wire 1 ( dec_sw $end
    $var wire 12 ) dec_imm_type_s [11:0] $end
    $var wire 5 * dec_rs1 [4:0] $end
    $var wire 5 + dec_rs2 [4:0] $end
    $var wire 32 / exu_store_addr [31:0] $end
    $var wire 32 0 exu_store_data [31:0] $end
    $var wire 1 1 exu_store_en $end
    $var wire 2 2 exu_store_size [1:0] $end
    $var wire 5 3 reg_raddr_1 [4:0] $end
    $var wire 1 4 reg_ren_1 $end
    $var wire 32 , reg_rdata_1 [31:0] $end
    $var wire 5 5 reg_raddr_2 [4:0] $end
    $var wire 1 6 reg_ren_2 $end
    $var wire 32 - reg_rdata_2 [31:0] $end
    $var wire 1 . exu_stall $end
    $var wire 5 7 mid_reg_raddr_1 [4:0] $end
    $var wire 1 4 mid_reg_ren_1 $end
    $var wire 5 8 mid_reg_raddr_2 [4:0] $end
    $var wire 1 6 mid_reg_ren_2 $end
    $var wire 32 9 exu_store_addr_buff [31:0] $end
    $var wire 32 : exu_store_data_buff [31:0] $end
    $var wire 1 ; exu_store_en_buff $end
    $var wire 2 < exu_store_size_buff [1:0] $end
    $var wire 32 > STORE_BTYE [31:0] $end
    $var wire 32 ? STORE_HALFWORD [31:0] $end
    $var wire 32 @ STORE_WORD [31:0] $end
    $var wire 32 A STORE_IDLE [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b0000 $
0%
0&
0'
0(
b000000000000 )
b00000 *
b00000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
b00 2
b00000 3
04
b00000 5
06
b00000 7
b00000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
0;
b00 <
0=
b00000000000000000000000000000000 >
b00000000000000000000000000000001 ?
b00000000000000000000000000000010 @
b00000000000000000000000000000011 A
#5
b11 2
b11 <
1=
#10
0=
#15
1=
#20
1#
0=
#25
b0001 $
1%
1(
b111111110000 )
b00001 *
b00010 +
b00000000000000000001000000000000 ,
b00010010001101000101011001111000 -
b00001 3
14
b00010 5
16
b00001 7
b00010 8
1=
#30
0=
#35
b0010 $
b00000 3
04
b00000 5
06
b00000 7
b00000 8
1=
#40
0=
#45
b0011 $
b00000000000000000000111111110000 9
b00010010001101000101011001111000 :
1;
b10 <
1=
#50
0=
#55
b0100 $
b00000000000000000000111111110000 /
b00010010001101000101011001111000 0
11
b10 2
1=
#60
0=
#65
1=
#70
0=
#75
1=
#80
0=
#85
1=
#90
0=
#95
1=
#100
0=
#105
1=
#110
0=
#115
1=
