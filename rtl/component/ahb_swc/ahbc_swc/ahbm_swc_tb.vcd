$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module ahbm_swc_tb $end
   $var wire 1 8 hclk $end
   $var wire 1 # hrstn $end
   $var wire 32 + haddr [31:0] $end
   $var wire 1 : hmastlock $end
   $var wire 7 ; hprot [6:0] $end
   $var wire 3 < hsize [2:0] $end
   $var wire 2 , htrans [1:0] $end
   $var wire 32 - hwdata [31:0] $end
   $var wire 32 $ hrdata [31:0] $end
   $var wire 1 . hwrite $end
   $var wire 1 % hready $end
   $var wire 1 = hresp $end
   $var wire 1 > wbuffread $end
   $var wire 1 & wreq $end
   $var wire 32 ' wbuffdata [31:0] $end
   $var wire 32 ( wbuffaddr [31:0] $end
   $var wire 1 ? rbuffwrite $end
   $var wire 1 ) rreq $end
   $var wire 32 / rbuffdata [31:0] $end
   $var wire 32 * rbuffaddr [31:0] $end
   $var wire 1 0 done $end
   $var wire 1 1 resp $end
   $scope module ahbm_swc_inst $end
    $var wire 1 8 hclk $end
    $var wire 1 # hrstn $end
    $var wire 32 + haddr [31:0] $end
    $var wire 1 : hmastlock $end
    $var wire 7 ; hprot [6:0] $end
    $var wire 3 < hsize [2:0] $end
    $var wire 2 , htrans [1:0] $end
    $var wire 32 - hwdata [31:0] $end
    $var wire 32 $ hrdata [31:0] $end
    $var wire 1 . hwrite $end
    $var wire 1 % hready $end
    $var wire 1 = hresp $end
    $var wire 1 > wbuffread $end
    $var wire 1 & wreq $end
    $var wire 32 ' wbuffdata [31:0] $end
    $var wire 32 ( wbuffaddr [31:0] $end
    $var wire 1 ? rbuffwrite $end
    $var wire 1 ) rreq $end
    $var wire 32 / rbuffdata [31:0] $end
    $var wire 32 * rbuffaddr [31:0] $end
    $var wire 1 0 done $end
    $var wire 1 1 resp $end
    $var wire 32 @ IDLE [31:0] $end
    $var wire 32 A STEUP [31:0] $end
    $var wire 32 B WAIT [31:0] $end
    $var wire 32 @ HTRANS_IDLE [31:0] $end
    $var wire 32 A HTRANS_BUSY [31:0] $end
    $var wire 32 B HTRANS_NONSEQ [31:0] $end
    $var wire 32 C HTRANS_SEQ [31:0] $end
    $var wire 2 2 state [1:0] $end
    $var wire 2 9 nextstate [1:0] $end
    $var wire 32 3 hwdatabuff [31:0] $end
    $var wire 1 4 wpendingflag $end
    $var wire 1 5 wpendingflagdly $end
    $var wire 1 6 rpendingflag $end
    $var wire 1 7 rpendingflagdly $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00000000000000000000000000000000 $
0%
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00 ,
b00000000000000000000000000000000 -
0.
b00000000000000000000000000000000 /
00
01
b00 2
b00000000000000000000000000000000 3
04
05
06
07
18
b00 9
0:
b0000000 ;
b000 <
0=
0>
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000001 A
b00000000000000000000000000000010 B
b00000000000000000000000000000011 C
#1
#5
08
#10
18
#11
1#
#15
08
#20
18
#21
1&
b00000000000000000000000000010000 '
b00000000000000000000000000100000 (
b01 9
#25
08
#30
b00000000000000000000000000100000 +
b10 ,
1.
b01 2
b00000000000000000000000000010000 3
14
18
b10 9
#31
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
#35
08
#40
b10 2
18
#45
08
#50
18
#55
08
#60
18
#61
1%
b00 9
#65
08
#70
b00000000000000000000000000000000 +
b00 ,
b00000000000000000000000000010000 -
0.
b00 2
b00000000000000000000000000000000 3
04
15
18
#71
0%
#75
08
#80
18
#85
08
#90
18
#95
08
#100
18
#101
1%
#105
08
#110
b00000000000000000000000000000000 -
10
05
18
#111
0%
#115
08
#120
00
18
#125
08
#130
18
#135
08
#140
18
#141
b00000000000000000000000011001101 $
1)
b00000000000000000000000010101010 *
b01 9
#145
08
#150
b00000000000000000000000010101010 +
b10 ,
b01 2
16
18
b10 9
#151
0)
b00000000000000000000000000000000 *
#155
08
#160
b10 2
18
#165
08
#170
18
#175
08
#180
18
#181
1%
b00 9
#185
08
#190
b00000000000000000000000000000000 +
b00 ,
b00 2
06
17
18
#191
0%
#195
08
#200
18
#205
08
#210
18
#215
08
#220
18
#221
1%
#225
08
#230
b00000000000000000000000011001101 /
10
07
18
#235
08
#240
00
18
#245
08
#250
18
#251
1)
b00000000000000000000000010100001 *
b01 9
#255
08
#260
b00000000000000000000000010100001 +
b10 ,
b01 2
16
18
#261
b00000000000000000000000010100010 *
#265
08
#270
b00000000000000000000000010100010 +
17
18
#271
b00000000000000000000000000000001 $
b00000000000000000000000010100011 *
#275
08
#280
b00000000000000000000000010100011 +
b00000000000000000000000000000001 /
10
18
#281
b00000000000000000000000000000010 $
b00000000000000000000000010100100 *
#285
08
#290
b00000000000000000000000010100100 +
b00000000000000000000000000000010 /
18
#291
b00000000000000000000000000000011 $
b00000000000000000000000010100101 *
#295
08
#300
b00000000000000000000000010100101 +
b00000000000000000000000000000011 /
18
#301
b00000000000000000000000000000100 $
b00000000000000000000000010100110 *
#305
08
#310
b00000000000000000000000010100110 +
b00000000000000000000000000000100 /
18
#311
b00000000000000000000000000000101 $
b00000000000000000000000010100111 *
#315
08
#320
b00000000000000000000000010100111 +
b00000000000000000000000000000101 /
18
#321
b00000000000000000000000000000110 $
0)
b00000000000000000000000000000000 *
b00 9
#325
08
#330
b00000000000000000000000000000000 +
b00 ,
b00000000000000000000000000000110 /
b00 2
06
18
#331
b00000000000000000000000000000111 $
#335
08
#340
b00000000000000000000000000000111 /
07
18
#341
b00000000000000000000000000001000 $
#345
08
#350
00
18
#355
08
#360
18
#365
08
#370
18
#375
08
#380
18
#385
08
#390
18
#395
08
#400
18
#405
08
#410
18
#415
08
#420
18
#425
08
#430
18
#435
08
#440
18
#445
08
#450
18
#455
08
#460
18
#465
08
#470
18
#475
08
#480
18
#485
08
#490
18
#495
08
#500
18
