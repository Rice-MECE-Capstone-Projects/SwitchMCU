$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module branch_prediction_tb $end
   $var wire 1 0 predict_trigger $end
   $var wire 1 1 clk $end
   $var wire 2 # prediction_type [1:0] $end
   $var wire 1 2 actual_branch_trigger $end
   $var wire 1 $ curr_branch $end
   $var wire 1 $ curr_branch_temp $end
   $var wire 32 % imm [31:0] $end
   $var wire 32 & pc [31:0] $end
   $var wire 32 3 pc_o [31:0] $end
   $var wire 32 % temp_imm [31:0] $end
   $var wire 32 5 temp_pc_o [31:0] $end
   $var wire 32 & temp_pc [31:0] $end
   $var wire 1 6 reset $end
   $var wire 1 * prediction $end
   $var wire 32 ' instruction_o [31:0] $end
   $scope module branch_inst $end
    $var wire 1 0 predict_trigger $end
    $var wire 1 1 clk $end
    $var wire 2 # prediction_type [1:0] $end
    $var wire 1 2 actual_branch_trigger $end
    $var wire 1 $ curr_branch $end
    $var wire 32 % imm [31:0] $end
    $var wire 32 & pc [31:0] $end
    $var wire 32 3 pc_o [31:0] $end
    $var wire 1 6 reset $end
    $var wire 1 * prediction $end
    $var wire 32 ' instruction_o [31:0] $end
    $var wire 2 7 STATIC [1:0] $end
    $var wire 2 8 ONE_BIT [1:0] $end
    $var wire 2 9 TWO_BIT [1:0] $end
    $var wire 1 : TAKEN [0:0] $end
    $var wire 1 ; NOT_TAKEN [0:0] $end
    $var wire 1 + old_branch $end
    $var wire 32 , pc_temp [31:0] $end
    $var wire 32 < pc_x [31:0] $end
    $var wire 1 - prev_prediction $end
    $var wire 1 . predict_trigger_prev $end
    $var wire 1 / actual_branch $end
    $scope module ins_mem $end
     $var wire 32 = MEM_SIZE [31:0] $end
     $var wire 1 1 clk $end
     $var wire 1 6 reset $end
     $var wire 32 & pc_i [31:0] $end
     $var wire 32 < pc_o [31:0] $end
     $var wire 32 ' instruction_o [31:0] $end
     $var wire 32 ( instruction [31:0] $end
     $var wire 32 4 pc_reg [31:0] $end
     $var wire 32 & pc [31:0] $end
     $var wire 32 ) address_index [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00 #
1$
b00000000000000000000000000000001 %
b00000000000000000000001111111000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000011111110 )
0*
0+
b00000000000000000000000000000000 ,
0-
0.
0/
00
11
02
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
06
b00 7
b01 8
b10 9
1:
0;
b00000000000000000000000000000000 <
b00000000100110001001011010000000 =
#5
01
#10
1*
b00000000000000000000001111111000 ,
1.
1/
10
11
12
b00000000000000000000001111110101 3
#15
01
#20
0*
0.
00
11
02
b00000000000000000000001111111000 3
#25
01
#30
0$
1*
1+
1.
0/
10
11
12
b00000000000000000000001111110101 3
#35
01
#40
0*
0.
00
11
02
b00000000000000000000001111111000 3
#45
b01 #
01
#50
0+
1.
10
11
12
#55
01
#60
0.
00
11
02
#65
1$
01
#70
1.
1/
10
11
12
#75
0$
01
#80
0.
00
11
02
#85
01
#90
1*
1+
1.
0/
10
11
12
b00000000000000000000001111110101 3
#95
01
#100
b10 #
0*
0.
00
11
02
b00000000000000000000001111111000 3
#105
01
#110
0+
1.
10
11
12
#115
01
#120
1$
0.
00
11
02
#125
01
#130
1.
1/
10
11
12
#135
01
#140
0.
00
11
02
#145
01
#150
1+
1.
10
11
12
#155
01
#160
0.
00
11
02
#165
01
#170
1*
1.
10
11
12
b00000000000000000000001111110101 3
#175
01
#180
0$
0*
0.
00
11
02
b00000000000000000000001111111000 3
#185
01
#190
1*
1.
0/
10
11
12
b00000000000000000000001111110101 3
#195
01
#200
0*
0.
00
11
02
b00000000000000000000001111111000 3
#205
01
#210
0+
1.
10
11
12
#215
01
#220
0.
00
11
02
#225
01
#230
1.
10
11
12
#235
01
#240
0.
00
11
02
#245
01
#250
1.
10
11
12
