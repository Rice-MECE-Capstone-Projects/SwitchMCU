{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bd3e8fed",
   "metadata": {},
   "source": [
    "# Writing to two seperate BRAM #\n",
    "They are  are seperated in address space, 8kbits of storage in address space, BRAM0 is read from, BRAM1 is write to in DUT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4317ac39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "path_gpio_bit: True\n",
      "path_gpio_hwh: True\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from pynq import PL\n",
    "PL.reset()\n",
    "path_gpio_bit = \"./design_1.bit\" # adress space: 65536\n",
    "path_gpio_hwh = \"./design_1.hwh\"\n",
    "\n",
    "print(f\"path_gpio_bit: {os.path.exists(path_gpio_bit)}\")\n",
    "print(f\"path_gpio_hwh: {os.path.exists(path_gpio_hwh)}\")\n",
    "\n",
    "\n",
    "\n",
    "# from pynq import Xlnk\n",
    "\n",
    "# # Flush cache to ensure that writes reach the BRAM\n",
    "# xlnk = Xlnk()\n",
    "# xlnk.xlnk_reset()  # This clears the cache\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3a17869c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%microblaze/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%pybind11/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pynq import Overlay\n",
    "from pynq import GPIO\n",
    "from pynq import MMIO\n",
    "\n",
    "overlay = Overlay(path_gpio_bit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10be1433",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the BRAM base address from your design (replace with the actual base address)\n",
    "BRAM0_BASE_ADDR = 0x40000000  # Example, check your Address Editor in Vivado\n",
    "BRAM0_SIZE      =    0x40000  # Adjust if necessary based on your BRAM size, 2^16 entries, thus 2^16 * 4 byte entries\n",
    "                    #0x40000\n",
    "                    #0x10000\n",
    "                    \n",
    "bram_0 = MMIO(BRAM0_BASE_ADDR, BRAM0_SIZE)\n",
    "\n",
    "\n",
    "BRAM1_BASE_ADDR = 0x42000000  # Example, check your Address Editor in Vivado\n",
    "BRAM1_SIZE      =    0x40000  # Adjust if necessary based on your BRAM size\n",
    "bram_1 = MMIO(BRAM1_BASE_ADDR, BRAM1_SIZE)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4c268ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def init_bram_from_hex(bram, hex_filename, default_value=\"00000013\", memory_depth=None):\n",
    "    memory = {}  # Dictionary mapping word address -> data word (hex string)\n",
    "    current_address = 0\n",
    "\n",
    "    # Read and parse the hex file\n",
    "    with open(hex_filename, 'r') as file:\n",
    "        for line in file:\n",
    "            line = line.strip()\n",
    "            if not line:\n",
    "                continue  # Skip empty lines\n",
    "            if line.startswith('@'):\n",
    "                try:\n",
    "                    # Update the current address from the marker (ignore the '@')\n",
    "                    current_address = int(line[1:], 16)\n",
    "                except ValueError as e:\n",
    "                    print(f\"Error parsing address in line: {line} ({e})\")\n",
    "                    continue\n",
    "            else:\n",
    "                # Assign this data word to the current address\n",
    "                memory[current_address] = line\n",
    "                current_address += 1\n",
    "\n",
    "    # Determine memory depth if not provided\n",
    "    if memory_depth is None:\n",
    "        if memory:\n",
    "            memory_depth = max(memory.keys()) + 1\n",
    "        else:\n",
    "            memory_depth = 0\n",
    "\n",
    "    # Convert default value to integer\n",
    "    default_int = int(default_value, 16)\n",
    "\n",
    "    # Write to BRAM for all addresses from 0 to memory_depth - 1\n",
    "    for addr in range(memory_depth):\n",
    "        word_str = memory.get(addr, default_value)\n",
    "        try:\n",
    "            word_int = int(word_str, 16)\n",
    "        except ValueError as e:\n",
    "            print(f\"Error converting word at address {addr}: {word_str} ({e}), using default\")\n",
    "            word_int = default_int\n",
    "        # Multiply by 4 for proper 4-byte alignment\n",
    "        bram.write(addr * 4, word_int)\n",
    "    \n",
    "    print(\"BRAM initialization complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ccaf6e6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BRAM initialization complete.\n",
      "Address 0x00: Value 0xfd010113\n",
      "Address 0x04: Value 0x02112623\n",
      "Address 0x08: Value 0x02812423\n",
      "Address 0x0c: Value 0x03010413\n",
      "Address 0x10: Value 0xfca42e23\n",
      "Address 0x14: Value 0xfcb42c23\n",
      "Address 0x18: Value 0xfdc42783\n",
      "Address 0x1c: Value 0xfef42623\n",
      "Address 0x20: Value 0xfec42783\n",
      "Address 0x24: Value 0xfd842703\n",
      "Address 0x28: Value 0x00e7a023\n",
      "Address 0x2c: Value 0x00000013\n",
      "Address 0x30: Value 0x02c12083\n",
      "Address 0x34: Value 0x02812403\n",
      "Address 0x38: Value 0x03010113\n",
      "Address 0x3c: Value 0x00008067\n",
      "Address 0x40: Value 0xfe010113\n",
      "Address 0x44: Value 0x00112e23\n",
      "Address 0x48: Value 0x00812c23\n",
      "Address 0x4c: Value 0x02010413\n",
      "Address 0x50: Value 0xfea42623\n",
      "Address 0x54: Value 0xfec42783\n",
      "Address 0x58: Value 0x00078593\n",
      "Address 0x5c: Value 0x60400513\n",
      "Address 0x60: Value 0xfa1ff0ef\n",
      "Address 0x64: Value 0x0badf7b7\n",
      "Address 0x68: Value 0x00d78593\n",
      "Address 0x6c: Value 0x60000513\n",
      "Address 0x70: Value 0xf91ff0ef\n",
      "Address 0x74: Value 0x0000006f\n",
      "Address 0x78: Value 0xfe010113\n",
      "Address 0x7c: Value 0x00112e23\n",
      "Address 0x80: Value 0x00812c23\n",
      "Address 0x84: Value 0x02010413\n",
      "Address 0x88: Value 0x03200793\n",
      "Address 0x8c: Value 0xfef42423\n",
      "Address 0x90: Value 0x03200793\n",
      "Address 0x94: Value 0xfef42223\n",
      "Address 0x98: Value 0xfe842783\n",
      "Address 0x9c: Value 0xfe442703\n",
      "Address 0xa0: Value 0x40e782b3\n",
      "Address 0xa4: Value 0x00028663\n",
      "Address 0xa8: Value 0x00000793\n",
      "Address 0xac: Value 0x0080006f\n",
      "Address 0xb0: Value 0x00100793\n",
      "Address 0xb4: Value 0xfef42623\n",
      "Address 0xb8: Value 0xfec42783\n",
      "Address 0xbc: Value 0x00078513\n",
      "Address 0xc0: Value 0x01c12083\n",
      "Address 0xc4: Value 0x01812403\n",
      "Address 0xc8: Value 0x02010113\n",
      "Address 0xcc: Value 0x00008067\n",
      "Address 0xd0: Value 0xfe010113\n",
      "Address 0xd4: Value 0x00112e23\n",
      "Address 0xd8: Value 0x00812c23\n",
      "Address 0xdc: Value 0x02010413\n",
      "Address 0xe0: Value 0x03200793\n",
      "Address 0xe4: Value 0xfef42423\n",
      "Address 0xe8: Value 0x03c00793\n",
      "Address 0xec: Value 0xfef42223\n",
      "Address 0xf0: Value 0xfe842783\n",
      "Address 0xf4: Value 0xfe442703\n",
      "Address 0xf8: Value 0x40e782b3\n",
      "Address 0xfc: Value 0x00029663\n",
      "Address 0x100: Value 0x00000793\n",
      "Address 0x104: Value 0x0080006f\n",
      "Address 0x108: Value 0x00100793\n",
      "Address 0x10c: Value 0xfef42623\n",
      "Address 0x110: Value 0xfec42783\n",
      "Address 0x114: Value 0x00078513\n",
      "Address 0x118: Value 0x01c12083\n",
      "Address 0x11c: Value 0x01812403\n",
      "Address 0x120: Value 0x02010113\n",
      "Address 0x124: Value 0x00008067\n",
      "Address 0x128: Value 0xfe010113\n",
      "Address 0x12c: Value 0x00112e23\n",
      "Address 0x130: Value 0x00812c23\n",
      "Address 0x134: Value 0x02010413\n",
      "Address 0x138: Value 0xff600793\n",
      "Address 0x13c: Value 0xfef42623\n",
      "Address 0x140: Value 0x00500793\n",
      "Address 0x144: Value 0xfef42423\n",
      "Address 0x148: Value 0xfec42703\n",
      "Address 0x14c: Value 0xfe842783\n",
      "Address 0x150: Value 0x00f75663\n",
      "Address 0x154: Value 0x00100793\n",
      "Address 0x158: Value 0x0080006f\n",
      "Address 0x15c: Value 0x00000793\n",
      "Address 0x160: Value 0x00078513\n",
      "Address 0x164: Value 0x01c12083\n",
      "Address 0x168: Value 0x01812403\n",
      "Address 0x16c: Value 0x02010113\n",
      "Address 0x170: Value 0x00008067\n",
      "Address 0x174: Value 0xfe010113\n",
      "Address 0x178: Value 0x00112e23\n",
      "Address 0x17c: Value 0x00812c23\n",
      "Address 0x180: Value 0x02010413\n",
      "Address 0x184: Value 0x00500793\n",
      "Address 0x188: Value 0xfef42623\n",
      "Address 0x18c: Value 0x00500793\n",
      "Address 0x190: Value 0xfef42423\n",
      "Address 0x194: Value 0xfec42703\n",
      "Address 0x198: Value 0xfe842783\n",
      "Address 0x19c: Value 0x00f74663\n",
      "Address 0x1a0: Value 0x00100793\n",
      "Address 0x1a4: Value 0x0080006f\n",
      "Address 0x1a8: Value 0x00000793\n",
      "Address 0x1ac: Value 0x00078513\n",
      "Address 0x1b0: Value 0x01c12083\n",
      "Address 0x1b4: Value 0x01812403\n",
      "Address 0x1b8: Value 0x02010113\n",
      "Address 0x1bc: Value 0x00008067\n",
      "Address 0x1c0: Value 0xfe010113\n",
      "Address 0x1c4: Value 0x00112e23\n",
      "Address 0x1c8: Value 0x00812c23\n",
      "Address 0x1cc: Value 0x02010413\n",
      "Address 0x1d0: Value 0xff000793\n",
      "Address 0x1d4: Value 0xfef42423\n",
      "Address 0x1d8: Value 0x01000793\n",
      "Address 0x1dc: Value 0xfef42223\n",
      "Address 0x1e0: Value 0xfe842783\n",
      "Address 0x1e4: Value 0xfe442703\n",
      "Address 0x1e8: Value 0x00e7f663\n",
      "Address 0x1ec: Value 0x00000793\n",
      "Address 0x1f0: Value 0x0080006f\n",
      "Address 0x1f4: Value 0x00100793\n",
      "Address 0x1f8: Value 0xfef42623\n",
      "Address 0x1fc: Value 0xfec42783\n",
      "Address 0x200: Value 0x00078513\n",
      "Address 0x204: Value 0x01c12083\n",
      "Address 0x208: Value 0x01812403\n",
      "Address 0x20c: Value 0x02010113\n",
      "Address 0x210: Value 0x00008067\n",
      "Address 0x214: Value 0xfe010113\n",
      "Address 0x218: Value 0x00112e23\n",
      "Address 0x21c: Value 0x00812c23\n",
      "Address 0x220: Value 0x02010413\n",
      "Address 0x224: Value 0x01000793\n",
      "Address 0x228: Value 0xfef42423\n",
      "Address 0x22c: Value 0xff000793\n",
      "Address 0x230: Value 0xfef42223\n",
      "Address 0x234: Value 0xfe842783\n",
      "Address 0x238: Value 0xfe442703\n",
      "Address 0x23c: Value 0x00e7e663\n",
      "Address 0x240: Value 0x00000793\n",
      "Address 0x244: Value 0x0080006f\n",
      "Address 0x248: Value 0x00100793\n",
      "Address 0x24c: Value 0xfef42623\n",
      "Address 0x250: Value 0xfec42783\n",
      "Address 0x254: Value 0x00078513\n",
      "Address 0x258: Value 0x01c12083\n",
      "Address 0x25c: Value 0x01812403\n",
      "Address 0x260: Value 0x02010113\n",
      "Address 0x264: Value 0x00008067\n",
      "Address 0x268: Value 0xfe010113\n",
      "Address 0x26c: Value 0x00112e23\n",
      "Address 0x270: Value 0x00812c23\n",
      "Address 0x274: Value 0x02010413\n",
      "Address 0x278: Value 0xfd0107b7\n",
      "Address 0x27c: Value 0x11378793\n",
      "Address 0x280: Value 0xfef42623\n",
      "Address 0x284: Value 0x00200793\n",
      "Address 0x288: Value 0xfef42423\n",
      "Address 0x28c: Value 0xfec42703\n",
      "Address 0x290: Value 0xfe842783\n",
      "Address 0x294: Value 0x00f76663\n",
      "Address 0x298: Value 0x00100793\n",
      "Address 0x29c: Value 0x0080006f\n",
      "Address 0x2a0: Value 0x00000793\n",
      "Address 0x2a4: Value 0x00078513\n",
      "Address 0x2a8: Value 0x01c12083\n",
      "Address 0x2ac: Value 0x01812403\n",
      "Address 0x2b0: Value 0x02010113\n",
      "Address 0x2b4: Value 0x00008067\n",
      "Address 0x2b8: Value 0xfe010113\n",
      "Address 0x2bc: Value 0x00112e23\n",
      "Address 0x2c0: Value 0x00812c23\n",
      "Address 0x2c4: Value 0x02010413\n",
      "Address 0x2c8: Value 0xdb1ff0ef\n",
      "Address 0x2cc: Value 0xfea42623\n",
      "Address 0x2d0: Value 0xfec42703\n",
      "Address 0x2d4: Value 0x00100793\n",
      "Address 0x2d8: Value 0x00f70663\n",
      "Address 0x2dc: Value 0x00100513\n",
      "Address 0x2e0: Value 0xd61ff0ef\n",
      "Address 0x2e4: Value 0xdedff0ef\n",
      "Address 0x2e8: Value 0xfea42623\n",
      "Address 0x2ec: Value 0xfec42703\n",
      "Address 0x2f0: Value 0x00100793\n",
      "Address 0x2f4: Value 0x00f70663\n",
      "Address 0x2f8: Value 0x00200513\n",
      "Address 0x2fc: Value 0xd45ff0ef\n",
      "Address 0x300: Value 0xe75ff0ef\n",
      "Address 0x304: Value 0xfea42623\n",
      "Address 0x308: Value 0xfec42703\n",
      "Address 0x30c: Value 0x00100793\n",
      "Address 0x310: Value 0x00f70663\n",
      "Address 0x314: Value 0x00300513\n",
      "Address 0x318: Value 0xd29ff0ef\n",
      "Address 0x31c: Value 0xe0dff0ef\n",
      "Address 0x320: Value 0xfea42623\n",
      "Address 0x324: Value 0xfec42703\n",
      "Address 0x328: Value 0x00100793\n",
      "Address 0x32c: Value 0x00f70663\n",
      "Address 0x330: Value 0x00400513\n",
      "Address 0x334: Value 0xd0dff0ef\n",
      "Address 0x338: Value 0xe89ff0ef\n",
      "Address 0x33c: Value 0xfea42623\n",
      "Address 0x340: Value 0xfec42703\n",
      "Address 0x344: Value 0x00100793\n",
      "Address 0x348: Value 0x00f70663\n",
      "Address 0x34c: Value 0x00600513\n",
      "Address 0x350: Value 0xcf1ff0ef\n",
      "Address 0x354: Value 0xec1ff0ef\n",
      "Address 0x358: Value 0xfea42623\n",
      "Address 0x35c: Value 0xfec42703\n",
      "Address 0x360: Value 0x00100793\n",
      "Address 0x364: Value 0x00f70663\n",
      "Address 0x368: Value 0x00800513\n",
      "Address 0x36c: Value 0xcd5ff0ef\n",
      "Address 0x370: Value 0xdeadc7b7\n",
      "Address 0x374: Value 0xeef78593\n",
      "Address 0x378: Value 0x60000513\n",
      "Address 0x37c: Value 0xc85ff0ef\n",
      "Address 0x380: Value 0x0000006f\n",
      "Address 0x384: Value 0x00001117\n",
      "Address 0x388: Value 0xc7c10113\n",
      "Address 0x38c: Value 0xf2dff0ef\n",
      "Address 0x390: Value 0xff5ff06f\n",
      "Address 0x394: Value 0x00000013\n",
      "Address 0x398: Value 0x00000013\n",
      "Address 0x39c: Value 0x00000013\n",
      "Address 0x3a0: Value 0x00000013\n",
      "Address 0x3a4: Value 0x00000013\n",
      "Address 0x3a8: Value 0x00000013\n",
      "Address 0x3ac: Value 0x00000013\n",
      "Address 0x3b0: Value 0x00000013\n",
      "Address 0x3b4: Value 0x00000013\n",
      "Address 0x3b8: Value 0x00000013\n",
      "Address 0x3bc: Value 0x00000013\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# -----------------------------------------------------------------------------\n",
    "# Example usage: (with a dummy BRAM class for testing purposes)\n",
    "# if __name__ == \"__main__\":\n",
    "#     # Dummy BRAM class for demonstration\n",
    "#     class DummyBRAM:\n",
    "#         def __init__(self):\n",
    "#             self.mem = {}\n",
    "#         def write(self, address, value):\n",
    "#             self.mem[address] = value\n",
    "#             print(f\"BRAM.write({address:#04x}, {value:#010x})\")\n",
    "#         def read(self, address):\n",
    "#             return self.mem.get(address, None)\n",
    "\n",
    "    # Instantiate dummy BRAM\n",
    "#     bram = DummyBRAM()\n",
    "\n",
    "    # Specify your .hex file path\n",
    "hex_file = \"byte_data.txt\"\n",
    "    # Specify memory depth if needed (for example, 256 words), or leave as None to use highest address + 1\n",
    "memory_depth = 1000\n",
    "\n",
    "    # Initialize BRAM with the hex file; uninitialized addresses are set to 0x00000013\n",
    "init_bram_from_hex(bram_0, hex_file, default_value=\"00000013\", memory_depth=memory_depth)\n",
    "\n",
    "#     # (Optional) Read back some values to verify\n",
    "for addr in range(240):\n",
    "    value = bram_0.read(addr * 4)  # read using the 4-byte aligned address\n",
    "    if value is not None:\n",
    "        print(f\"Address {addr * 4:#04x}: Value {value:#010x}\")\n",
    "    else:\n",
    "        print(f\"Address {addr * 4:#04x}: Uninitialized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "97fb775b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['axi_gpio_0', 'axi_gpio_1', 'processing_system7_0'])\n"
     ]
    }
   ],
   "source": [
    "print(overlay.ip_dict.keys())\n",
    "from pynq.lib import AxiGPIO\n",
    "\n",
    "channel_0_dict     = overlay.ip_dict['axi_gpio_0']\n",
    "channel_1_dict     = overlay.ip_dict['axi_gpio_1']\n",
    "\n",
    "GPIO0_R0_CH1      = AxiGPIO(channel_0_dict).channel1 # control signals\n",
    "GPIO0_R0_CH2      = AxiGPIO(channel_0_dict).channel2 # memory_offset\n",
    "GPIO0_R1_CH1      = AxiGPIO(channel_1_dict).channel1 # initial_pc_i\n",
    "GPIO0_R1_CH2      = AxiGPIO(channel_1_dict).channel2 # success_code\n",
    "\n",
    "\n",
    "reset_signal = 0x00000002\n",
    "zero_signal  = 0x00000000\n",
    "start_signal = 0x00000001\n",
    "\n",
    "memory_offset = 0x00000600\n",
    "initial_pc_i  = 0x00000384\n",
    "success_code  = 0xDEADBEEF\n",
    "\n",
    "\n",
    "GPIO0_R0_CH2[0:32].write(memory_offset)\n",
    "GPIO0_R1_CH1[0:32].write(initial_pc_i)\n",
    "GPIO0_R1_CH2[0:32].write(success_code)\n",
    "\n",
    "# GPIO0_R0_CH1[0:32].write(reset_signal)\n",
    "\n",
    "\n",
    "\n",
    "# addr = 0x08\n",
    "# read_adr[0:32].write(addr)\n",
    "# print(f\"data value in addr {addr} Decimal value: {data_val.read()}\")\n",
    "# print(f\"data value in addr {addr} Hex: 0x{data_val.read():08X}\")\n",
    "# print(f\"Read value from BRAM: 0x{read_value:08X}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6037a9bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Address 0x00: Value 0x00000000\n",
      "Address 0x04: Value 0x00000000\n",
      "Address 0x08: Value 0x00000000\n",
      "Address 0x0c: Value 0x00000000\n",
      "Address 0x10: Value 0x00000000\n",
      "Address 0x14: Value 0x00000000\n",
      "Address 0x18: Value 0x00000000\n",
      "Address 0x1c: Value 0x00000000\n",
      "Address 0x20: Value 0x00000000\n",
      "Address 0x24: Value 0x00000000\n",
      "Address 0x28: Value 0x00000000\n",
      "Address 0x2c: Value 0x00000000\n",
      "Address 0x30: Value 0x00000000\n",
      "Address 0x34: Value 0x00000000\n",
      "Address 0x38: Value 0x00000000\n",
      "Address 0x3c: Value 0x00000000\n",
      "Address 0x40: Value 0x00000000\n",
      "Address 0x44: Value 0x00000000\n",
      "Address 0x48: Value 0x00000000\n",
      "Address 0x4c: Value 0x00000000\n",
      "Address 0x50: Value 0x00000000\n",
      "Address 0x54: Value 0x00000000\n",
      "Address 0x58: Value 0x00000000\n",
      "Address 0x5c: Value 0x00000000\n",
      "Address 0x60: Value 0x00000000\n",
      "Address 0x64: Value 0x00000000\n",
      "Address 0x68: Value 0x00000000\n",
      "Address 0x6c: Value 0x00000000\n",
      "Address 0x70: Value 0x00000000\n",
      "Address 0x74: Value 0x00000000\n",
      "Address 0x78: Value 0x00000000\n",
      "Address 0x7c: Value 0x00000000\n",
      "Address 0x80: Value 0x00000000\n",
      "Address 0x84: Value 0x00000000\n",
      "Address 0x88: Value 0x00000000\n",
      "Address 0x8c: Value 0x00000000\n",
      "Address 0x90: Value 0x00000000\n",
      "Address 0x94: Value 0x00000000\n",
      "Address 0x98: Value 0x00000000\n",
      "Address 0x9c: Value 0x00000000\n",
      "Address 0xa0: Value 0x00000000\n",
      "Address 0xa4: Value 0x00000000\n",
      "Address 0xa8: Value 0x00000000\n",
      "Address 0xac: Value 0x00000000\n",
      "Address 0xb0: Value 0x00000000\n",
      "Address 0xb4: Value 0x00000000\n",
      "Address 0xb8: Value 0x00000000\n",
      "Address 0xbc: Value 0x00000000\n",
      "Address 0xc0: Value 0x00000000\n",
      "Address 0xc4: Value 0x00000000\n",
      "Address 0xc8: Value 0x00000000\n",
      "Address 0xcc: Value 0x00000000\n",
      "Address 0xd0: Value 0x00000000\n",
      "Address 0xd4: Value 0x00000000\n",
      "Address 0xd8: Value 0x00000000\n",
      "Address 0xdc: Value 0x00000000\n",
      "Address 0xe0: Value 0x00000000\n",
      "Address 0xe4: Value 0x00000000\n",
      "Address 0xe8: Value 0x00000000\n",
      "Address 0xec: Value 0x00000000\n",
      "Address 0xf0: Value 0x00000000\n",
      "Address 0xf4: Value 0x00000000\n",
      "Address 0xf8: Value 0x00000000\n",
      "Address 0xfc: Value 0x00000000\n",
      "Address 0x100: Value 0x00000000\n",
      "Address 0x104: Value 0x00000000\n",
      "Address 0x108: Value 0x00000000\n",
      "Address 0x10c: Value 0x00000000\n",
      "Address 0x110: Value 0x00000000\n",
      "Address 0x114: Value 0x00000000\n",
      "Address 0x118: Value 0x00000000\n",
      "Address 0x11c: Value 0x00000000\n",
      "Address 0x120: Value 0x00000000\n",
      "Address 0x124: Value 0x00000000\n",
      "Address 0x128: Value 0x00000000\n",
      "Address 0x12c: Value 0x00000000\n",
      "Address 0x130: Value 0x00000000\n",
      "Address 0x134: Value 0x00000000\n",
      "Address 0x138: Value 0x00000000\n",
      "Address 0x13c: Value 0x00000000\n",
      "Address 0x140: Value 0x00000000\n",
      "Address 0x144: Value 0x00000000\n",
      "Address 0x148: Value 0x00000000\n",
      "Address 0x14c: Value 0x00000000\n",
      "Address 0x150: Value 0x00000000\n",
      "Address 0x154: Value 0x00000000\n",
      "Address 0x158: Value 0x00000000\n",
      "Address 0x15c: Value 0x00000000\n",
      "Address 0x160: Value 0x00000000\n",
      "Address 0x164: Value 0x00000000\n",
      "Address 0x168: Value 0x00000000\n",
      "Address 0x16c: Value 0x00000000\n",
      "Address 0x170: Value 0x00000000\n",
      "Address 0x174: Value 0x00000000\n",
      "Address 0x178: Value 0x00000000\n",
      "Address 0x17c: Value 0x00000000\n",
      "Address 0x180: Value 0x00000000\n",
      "Address 0x184: Value 0x00000000\n",
      "Address 0x188: Value 0x00000000\n",
      "Address 0x18c: Value 0x00000000\n",
      "Address 0x190: Value 0x00000000\n",
      "Address 0x194: Value 0x00000000\n",
      "Address 0x198: Value 0x00000000\n",
      "Address 0x19c: Value 0x00000000\n",
      "Address 0x1a0: Value 0x00000000\n",
      "Address 0x1a4: Value 0x00000000\n",
      "Address 0x1a8: Value 0x00000000\n",
      "Address 0x1ac: Value 0x00000000\n",
      "Address 0x1b0: Value 0x00000000\n",
      "Address 0x1b4: Value 0x00000000\n",
      "Address 0x1b8: Value 0x00000000\n",
      "Address 0x1bc: Value 0x00000000\n",
      "Address 0x1c0: Value 0x00000000\n",
      "Address 0x1c4: Value 0x00000000\n",
      "Address 0x1c8: Value 0x00000000\n",
      "Address 0x1cc: Value 0x00000000\n",
      "Address 0x1d0: Value 0x00000000\n",
      "Address 0x1d4: Value 0x00000000\n",
      "Address 0x1d8: Value 0x00000000\n",
      "Address 0x1dc: Value 0x00000000\n",
      "Address 0x1e0: Value 0x00000000\n",
      "Address 0x1e4: Value 0x00000000\n",
      "Address 0x1e8: Value 0x00000000\n",
      "Address 0x1ec: Value 0x00000000\n",
      "Address 0x1f0: Value 0x00000000\n",
      "Address 0x1f4: Value 0x00000000\n",
      "Address 0x1f8: Value 0x00000000\n",
      "Address 0x1fc: Value 0x00000000\n",
      "Address 0x200: Value 0x00000000\n",
      "Address 0x204: Value 0x00000000\n",
      "Address 0x208: Value 0x00000000\n",
      "Address 0x20c: Value 0x00000000\n",
      "Address 0x210: Value 0x00000000\n",
      "Address 0x214: Value 0x00000000\n",
      "Address 0x218: Value 0x00000000\n",
      "Address 0x21c: Value 0x00000000\n",
      "Address 0x220: Value 0x00000000\n",
      "Address 0x224: Value 0x00000000\n",
      "Address 0x228: Value 0x00000000\n",
      "Address 0x22c: Value 0x00000000\n",
      "Address 0x230: Value 0x00000000\n",
      "Address 0x234: Value 0x00000000\n",
      "Address 0x238: Value 0x00000000\n",
      "Address 0x23c: Value 0x00000000\n",
      "Address 0x240: Value 0x00000000\n",
      "Address 0x244: Value 0x00000000\n",
      "Address 0x248: Value 0x00000000\n",
      "Address 0x24c: Value 0x00000000\n",
      "Address 0x250: Value 0x00000000\n",
      "Address 0x254: Value 0x00000000\n",
      "Address 0x258: Value 0x00000000\n",
      "Address 0x25c: Value 0x00000000\n",
      "Address 0x260: Value 0x00000000\n",
      "Address 0x264: Value 0x00000000\n",
      "Address 0x268: Value 0x00000000\n",
      "Address 0x26c: Value 0x00000000\n",
      "Address 0x270: Value 0x00000000\n",
      "Address 0x274: Value 0x00000000\n",
      "Address 0x278: Value 0x00000000\n",
      "Address 0x27c: Value 0x00000000\n",
      "Address 0x280: Value 0x00000000\n",
      "Address 0x284: Value 0x00000000\n",
      "Address 0x288: Value 0x00000000\n",
      "Address 0x28c: Value 0x00000000\n",
      "Address 0x290: Value 0x00000000\n",
      "Address 0x294: Value 0x00000000\n",
      "Address 0x298: Value 0x00000000\n",
      "Address 0x29c: Value 0x00000000\n",
      "Address 0x2a0: Value 0x00000000\n",
      "Address 0x2a4: Value 0x00000000\n",
      "Address 0x2a8: Value 0x00000000\n",
      "Address 0x2ac: Value 0x00000000\n",
      "Address 0x2b0: Value 0x00000000\n",
      "Address 0x2b4: Value 0x00000000\n",
      "Address 0x2b8: Value 0x00000000\n",
      "Address 0x2bc: Value 0x00000000\n",
      "Address 0x2c0: Value 0x00000000\n",
      "Address 0x2c4: Value 0x00000000\n",
      "Address 0x2c8: Value 0x00000000\n",
      "Address 0x2cc: Value 0x00000000\n",
      "Address 0x2d0: Value 0x00000000\n",
      "Address 0x2d4: Value 0x00000000\n",
      "Address 0x2d8: Value 0x00000000\n",
      "Address 0x2dc: Value 0x00000000\n",
      "Address 0x2e0: Value 0x00000000\n",
      "Address 0x2e4: Value 0x00000000\n",
      "Address 0x2e8: Value 0x00000000\n",
      "Address 0x2ec: Value 0x00000000\n",
      "Address 0x2f0: Value 0x00000000\n",
      "Address 0x2f4: Value 0x00000000\n",
      "Address 0x2f8: Value 0x00000000\n",
      "Address 0x2fc: Value 0x00000000\n",
      "Address 0x300: Value 0x00000000\n",
      "Address 0x304: Value 0x00000000\n",
      "Address 0x308: Value 0x00000000\n",
      "Address 0x30c: Value 0x00000000\n",
      "Address 0x310: Value 0x00000000\n",
      "Address 0x314: Value 0x00000000\n",
      "Address 0x318: Value 0x00000000\n",
      "Address 0x31c: Value 0x00000000\n"
     ]
    }
   ],
   "source": [
    "for addr in range(200):\n",
    "    value = bram_1.read(addr * 4)  # read using the 4-byte aligned address\n",
    "    if value is not None:\n",
    "        print(f\"Address {addr * 4:#04x}: Value {value:#010x}\")\n",
    "    else:\n",
    "        print(f\"Address {addr * 4:#04x}: Uninitialized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "db6962df",
   "metadata": {},
   "outputs": [],
   "source": [
    "GPIO0_R0_CH1[0:32].write(reset_signal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c36c8144",
   "metadata": {},
   "outputs": [],
   "source": [
    " GPIO0_R0_CH1[0:32].write(zero_signal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "174d3726",
   "metadata": {},
   "outputs": [],
   "source": [
    " GPIO0_R0_CH1[0:32].write(start_signal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "78b4db26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Address 0x00: Value 0xdeadbeef\n",
      "Address 0x9b8: Value 0xdeadbeef\n",
      "Address 0x9bc: Value 0x00000600\n",
      "Address 0x9c4: Value 0xfffffff0\n",
      "Address 0x9c8: Value 0x00000010\n",
      "Address 0x9cc: Value 0x00000600\n",
      "Address 0x9d8: Value 0x00001000\n",
      "Address 0x9dc: Value 0x00000380\n",
      "Address 0x9ec: Value 0x00000001\n",
      "Address 0x9fc: Value 0x00000390\n"
     ]
    }
   ],
   "source": [
    "for addr in range(1000):\n",
    "    value = bram_1.read(addr * 4)  # read using the 4-byte aligned address\n",
    "    if value != 0x00000:\n",
    "        print(f\"Address {addr * 4:#04x}: Value {value:#010x}\")\n",
    "    \n",
    "#     if value is not None:\n",
    "#         print(f\"Address {addr * 4:#04x}: Value {value:#010x}\")\n",
    "#     else:\n",
    "#         print(f\"Address {addr * 4:#04x}: Uninitialized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e533c36c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## expected values: DATA_MEM:     D00000000:   deadbeef,   D000009b8:   deadbeef,   D000009bc:   00000600,   D000009c4:   fffffff0,   D000009c8:   00000010,   D000009cc:   00000600,   D000009d8:   00001000,   D000009dc:   00000380,   D000009ec:   00000001,   D000009fc:   00000390,\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bff568e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#     input  wire         clk,\n",
    "#     input  wire [31:0]  GPIO0_R0_CH1, // control signals\n",
    "#     input  wire [31:0]  GPIO0_R0_CH2, // memory_offset\n",
    "#     input  wire [31:0]  GPIO0_R1_CH1, // initial_pc_i\n",
    "#     input  wire [31:0]  GPIO0_R1_CH2, // success_code\n",
    "\n",
    "\n",
    "# assign start_design    = control_signals_in[0];\n",
    "# assign reset           = control_signals_in[1];\n",
    "\n",
    "#     parameter  N_param = 32, \n",
    "#     parameter memory_offset_param = 32'h00000600,\n",
    "#     parameter success_code = 32'hDEADBEEF,\n",
    "#     parameter cycles_timeout = 1100,\n",
    "#     parameter initial_pc    = 32'h00000384\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32c98b70",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0794977",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ae695322",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['type', 'mem_id', 'memtype', 'gpio', 'interrupts', 'parameters', 'registers', 'driver', 'device', 'state', 'bdtype', 'phys_addr', 'addr_range', 'fullpath'])\n"
     ]
    }
   ],
   "source": [
    "print(overlay.ip_dict['axi_gpio_0'].keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9eaa8280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1092616192\n",
      "Physical address of axi_gpio_xor GPIO controller: 0x41200000\n"
     ]
    }
   ],
   "source": [
    "print(overlay.ip_dict['axi_gpio_0']['phys_addr'])\n",
    "xor_address = overlay.ip_dict['axi_gpio_0']['phys_addr']\n",
    "print(\"Physical address of axi_gpio_xor GPIO controller: 0x\" + format(xor_address,'02x'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d38e62cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1092681728\n",
      "Physical address of axi_gpio_xor GPIO controller: 0x41210000\n"
     ]
    }
   ],
   "source": [
    "print(overlay.ip_dict['axi_gpio_1']['phys_addr'])\n",
    "xor_address = overlay.ip_dict['axi_gpio_1']['phys_addr']\n",
    "print(\"Physical address of axi_gpio_xor GPIO controller: 0x\" + format(xor_address,'02x'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea55a2cf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
